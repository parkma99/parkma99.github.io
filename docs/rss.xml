<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Park Ma's Blog</title><link>parkma99.github.io</link><description>write something</description><copyright>Park Ma's Blog</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://github.com/parkma99/parkma99.github.io/assets/84610851/cbdd1097-0277-45bc-94d8-b3de96b53607</url><title>avatar</title><link>parkma99.github.io</link></image><lastBuildDate>Mon, 04 Dec 2023 14:45:24 +0000</lastBuildDate><managingEditor>Park Ma's Blog</managingEditor><pubDate>Mon, 04 Dec 2023 14:45:24 +0000</pubDate><ttl>60</ttl><webMaster>Park Ma's Blog</webMaster><item><title>LevelDB 写数据流程</title><link>parkma99.github.io/post/LevelDB%20-xie-shu-ju-liu-cheng.html</link><description>## 写流程&#13;
&#13;
### 插入到 MemTable&#13;
&#13;
#### 流程图&#13;
```mermaid&#13;
graph TB&#13;
    A(DBImpl::Put) --&gt; B[DB::Put]&#13;
    B --&gt; C[DBImpl::Write]&#13;
    C --&gt; D[Writer::AddRecord]&#13;
    C --&gt; E[WriteBatchInternal::InsertInto]&#13;
    E --&gt; F[WriteBatch::Iterate]&#13;
    F --&gt; G[MemTable::Add]&#13;
    G --&gt; H(SkipList&lt;Key, Comparator&gt;::Insert)&#13;
```&#13;
&#13;
#### 具体代码分析&#13;
&#13;
- DBImpl::Put&#13;
&#13;
直接调用 `DB::Put`&#13;
```cpp&#13;
Status DBImpl::Put(const WriteOptions&amp; o, const Slice&amp; key, const Slice&amp; val) {&#13;
  return DB::Put(o, key, val);&#13;
}&#13;
```&#13;
&#13;
- DB::Put&#13;
&#13;
```cpp&#13;
Status DB::Put(const WriteOptions&amp; opt, const Slice&amp; key, const Slice&amp; value) {&#13;
  WriteBatch batch;&#13;
  batch.Put(key, value); // 把key value 放入到 WriteBatch 中，具体是把key value 编码为字符串存入writebatch的内部成员中&#13;
  return Write(opt, &amp;batch);&#13;
}&#13;
```&#13;
&#13;
- DBImpl::Write&#13;
&#13;
```cpp&#13;
Status DBImpl::Write(const WriteOptions&amp; options, WriteBatch* updates) {&#13;
  Writer w(&amp;mutex_);&#13;
  w.batch = updates;&#13;
  w.sync = options.sync;&#13;
  w.done = false;&#13;
&#13;
  MutexLock l(&amp;mutex_);&#13;
  writers_.push_back(&amp;w);&#13;
  while (!w.done &amp;&amp; &amp;w != writers_.front()) {&#13;
    w.cv.Wait();&#13;
  }&#13;
  if (w.done) {&#13;
    return w.status;&#13;
  }&#13;
&#13;
  // May temporarily unlock and wait.&#13;
  Status status = MakeRoomForWrite(updates == nullptr);&#13;
  uint64_t last_sequence = versions_-&gt;LastSequence();&#13;
  Writer* last_writer = &amp;w;&#13;
  if (status.ok() &amp;&amp; updates != nullptr) {  // nullptr batch is for compactions&#13;
    WriteBatch* write_batch = BuildBatchGroup(&amp;last_writer);&#13;
    WriteBatchInternal::SetSequence(write_batch, last_sequence + 1);&#13;
    last_sequence += WriteBatchInternal::Count(write_batch);&#13;
&#13;
    // Add to log and apply to memtable.  We can release the lock&#13;
    // during this phase since &amp;w is currently responsible for logging&#13;
    // and protects against concurrent loggers and concurrent writes&#13;
    // into mem_.&#13;
    {&#13;
      mutex_.Unlock();&#13;
      status = log_-&gt;AddRecord(WriteBatchInternal::Contents(write_batch));&#13;
      bool sync_error = false;&#13;
      if (status.ok() &amp;&amp; options.sync) {&#13;
        status = logfile_-&gt;Sync();&#13;
        if (!status.ok()) {&#13;
          sync_error = true;&#13;
        }&#13;
      }&#13;
      if (status.ok()) {&#13;
        status = WriteBatchInternal::InsertInto(write_batch, mem_);&#13;
      }&#13;
      mutex_.Lock();&#13;
      if (sync_error) {&#13;
        // The state of the log file is indeterminate: the log record we&#13;
        // just added may or may not show up when the DB is re-opened.&#13;
        // So we force the DB into a mode where all future writes fail.&#13;
        RecordBackgroundError(status);&#13;
      }&#13;
    }&#13;
    if (write_batch == tmp_batch_) tmp_batch_-&gt;Clear();&#13;
&#13;
    versions_-&gt;SetLastSequence(last_sequence);&#13;
  }&#13;
&#13;
  while (true) {&#13;
    Writer* ready = writers_.front();&#13;
    writers_.pop_front();&#13;
    if (ready != &amp;w) {&#13;
      ready-&gt;status = status;&#13;
      ready-&gt;done = true;&#13;
      ready-&gt;cv.Signal();&#13;
    }&#13;
    if (ready == last_writer) break;&#13;
  }&#13;
&#13;
  // Notify new head of write queue&#13;
  if (!writers_.empty()) {&#13;
    writers_.front()-&gt;cv.Signal();&#13;
  }&#13;
&#13;
  return status;&#13;
}&#13;
```。</description><guid isPermaLink="true">parkma99.github.io/post/LevelDB%20-xie-shu-ju-liu-cheng.html</guid><pubDate>Mon, 04 Dec 2023 13:21:05 +0000</pubDate></item><item><title>使用 LevelDB</title><link>parkma99.github.io/post/shi-yong-%20LevelDB.html</link><description>LevelDB是一个键值对数据库，是一个持久化的有序的Map。</description><guid isPermaLink="true">parkma99.github.io/post/shi-yong-%20LevelDB.html</guid><pubDate>Sat, 02 Dec 2023 17:27:45 +0000</pubDate></item><item><title>理解 Bloom filter 的工作原理</title><link>parkma99.github.io/post/li-jie-%20Bloom%20filter%20-de-gong-zuo-yuan-li.html</link><description>## 布隆过滤器的作用&#13;
&#13;
我们经常能遇到判断一个元素是否在一个给定的集合中的需求，使用哈希表就可以解决这个需求，并且查询的时间复杂度是常数级。</description><guid isPermaLink="true">parkma99.github.io/post/li-jie-%20Bloom%20filter%20-de-gong-zuo-yuan-li.html</guid><pubDate>Sat, 02 Dec 2023 12:25:10 +0000</pubDate></item><item><title>理解 LSM Tree 的工作原理</title><link>parkma99.github.io/post/li-jie-%20LSM%20Tree%20-de-gong-zuo-yuan-li.html</link><description>LSM 树是处理大量写入工作负载时通常使用的数据结构，通过仅执行顺序写入来优化写入路径。</description><guid isPermaLink="true">parkma99.github.io/post/li-jie-%20LSM%20Tree%20-de-gong-zuo-yuan-li.html</guid><pubDate>Sat, 02 Dec 2023 11:08:38 +0000</pubDate></item><item><title>spdlog 源码阅读 registry 类</title><link>parkma99.github.io/post/spdlog%20-yuan-ma-yue-du-%20registry%20-lei.html</link><description>## 从` spdlog::info("Welcome to spdlog!");` 开始阅读&#13;
&#13;
通过查找 ` spdlog::info` 函数定义，可以找到其定义在 `spdlog.h` 下&#13;
&#13;
```cpp&#13;
template&lt;typename... Args&gt;&#13;
inline void info(format_string_t&lt;Args...&gt; fmt, Args &amp;&amp;...args)&#13;
{&#13;
    default_logger_raw()-&gt;info(fmt, std::forward&lt;Args&gt;(args)...);&#13;
}&#13;
```&#13;
&#13;
其中使用了 ` default_logger_raw()` 应该是获取到了系统默认的记录日志的对象，然后调用这个对象的info 方法， 函数的参数是模版类型，以后在进行分析。</description><guid isPermaLink="true">parkma99.github.io/post/spdlog%20-yuan-ma-yue-du-%20registry%20-lei.html</guid><pubDate>Sat, 02 Dec 2023 09:39:37 +0000</pubDate></item><item><title>使用 spdlog 打日志 </title><link>parkma99.github.io/post/shi-yong-%20spdlog%20-da-ri-zhi-%20.html</link><description>## spdlog 是什么&#13;
&#13;
&gt; [spdlog](https://github.com/gabime/spdlog) Very fast, header-only/compiled, C++ logging library&#13;
&#13;
官方仓库介绍是可以只包含头文件的日志库， 具体使用下来可以只包含头文件，（由于本人的Cmake 的知识太少），使用头文件的方式必须指定在 include 目录下， 后面就将整个 spdlog 仓库作为第三方库放在third_party 下。</description><guid isPermaLink="true">parkma99.github.io/post/shi-yong-%20spdlog%20-da-ri-zhi-%20.html</guid><pubDate>Sat, 02 Dec 2023 04:21:13 +0000</pubDate></item><item><title>关于</title><link>parkma99.github.io/post/guan-yu.html</link><description>一个终身学习者。</description><guid isPermaLink="true">parkma99.github.io/post/guan-yu.html</guid><pubDate>Fri, 01 Dec 2023 12:51:20 +0000</pubDate></item></channel></rss>